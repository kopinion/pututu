{"title":"NodeJS Express 入门","date":"2014-07-07T04:20:01.000Z","date_formatted":{"ll":"2014年7月7日","L":"2014/07/07","MM-DD":"07-07"},"link":"2014/07/07/express-intro","tags":["frontend"],"categories":["frontend"],"updated":"2021-06-07T04:25:31.428Z","content":"<p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br>\n使用 Express 可以快速地搭建一个完整功能的网站。</p>\n<p>Express 框架核心特性：</p>\n<ul>\n<li>可以设置中间件来响应 HTTP 请求。</li>\n<li>定义了路由表用于执行不同的 HTTP 请求动作。</li>\n<li>可以通过向模板传递参数来动态渲染 HTML 页面。</li>\n</ul>\n<h6 id=\"安装express-脚手架\">安装express 脚手架<a title=\"#安装express-脚手架\" href=\"#安装express-脚手架\"></a></h6>\n<p>sudo npm install -g express-generator</p>\n<p>如果以前安装过express-generator, 有可能会出现以下错误</p>\n<pre><code>Refusing to delete: /usr/local/bin/express\n</code></pre>\n<p>此时可以去删除/usr/local/bin/express link所指定的目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;bin&#x2F;express</span><br><span class=\"line\">ls -ltrch express</span><br><span class=\"line\">&#x2F;&#x2F; 此时的结果如下</span><br><span class=\"line\">express -&gt; ..&#x2F;lib&#x2F;node_modules&#x2F;express&#x2F;bin&#x2F;express</span><br><span class=\"line\">rm -rf ..&#x2F;lib&#x2F;node_modules&#x2F;express&#x2F;bin&#x2F;express</span><br><span class=\"line\">rm -rf express</span><br><span class=\"line\">&#x2F;&#x2F; 此时安装应该就可以成功了</span><br><span class=\"line\">sudo npm install -g express-generator</span><br></pre></td></tr></table></figure>\n<h6 id=\"1.-初始化项目\">1. 初始化项目<a title=\"#1.-初始化项目\" href=\"#1.-初始化项目\"></a></h6>\n<p>npm install</p>\n<h5 id=\"express-test\">Express Test<a title=\"#express-test\" href=\"#express-test\"></a></h5>\n<p>npm install supertest --save-dev<br>\nnpm install should --save-dev</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request &#x3D; require(&#39;supertest&#39;);</span><br><span class=\"line\">require(&quot;should&quot;);</span><br><span class=\"line\">var app &#x3D; require(&quot;..&#x2F;app&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(&quot;Product&quot;, function () &#123;</span><br><span class=\"line\">    describe(&quot;GET&quot;, function () &#123;</span><br><span class=\"line\">        describe(&quot;with exist product&quot;, function () &#123;</span><br><span class=\"line\">            it(&#39;should get 200&#39;, function (done) &#123;</span><br><span class=\"line\">                request(app)</span><br><span class=\"line\">                    .get(&#39;&#x2F;products&#x2F;1&#39;)</span><br><span class=\"line\">                    .expect(200)</span><br><span class=\"line\">                    .end(function(err, res) &#123;</span><br><span class=\"line\">                        if(err) &#123;</span><br><span class=\"line\">                            done(err);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        done();</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<h5 id=\"express-mongoose\">Express mongoose<a title=\"#express-mongoose\" href=\"#express-mongoose\"></a></h5>\n<p><strong>特别要注意require(app) 和require（Product）的顺序</strong><br>\n有以下两种顺序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Order &#x3D; require(&#39;..&#x2F;models&#x2F;order&#39;);</span><br><span class=\"line\">var User &#x3D; require(&quot;..&#x2F;models&#x2F;user&quot;);</span><br><span class=\"line\">var Product &#x3D; require(&quot;..&#x2F;models&#x2F;product&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">var app &#x3D; require(&quot;..&#x2F;app&quot;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var app &#x3D; require(&quot;..&#x2F;app&quot;);</span><br><span class=\"line\">var Product &#x3D; moogoose.model(&quot;Product&quot;);</span><br><span class=\"line\">var User &#x3D; moogoose.model(&quot;User&quot;);</span><br><span class=\"line\">var Order &#x3D; moogoose.model(&quot;Order&quot;);</span><br></pre></td></tr></table></figure>\n<p>npm install mockgoose --save-dev<br>\nnpm install mongoose --save</p>\n<p>mockgoose 和require的app的顺序有很强的联系，如果出现timeout，很有可能是因为mockgoose和app的require顺序写反了。此时可以使用如下方式解决</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Product &#x3D; mongoose.model(&quot;Product&quot;)</span><br></pre></td></tr></table></figure>\n<p>一般我们会在app.js中初始化我们的connection，但是这个connection在APP中初始化，所以每次我们require一次app.js，就会出现连接一次，如果第二次require没有将mongoose mock掉，此时会出现原来的测试挂掉的情况。<br>\n此时有两种解决方法：</p>\n<ol>\n<li>\n<p>在runner里面直接将mongoose mock掉</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(&#39;test&#39;, function() &#123;</span><br><span class=\"line\">    var mockgoose &#x3D; require(&#39;mockgoose&#39;);</span><br><span class=\"line\">    var mongoose &#x3D; require(&#39;mongoose&#39;);</span><br><span class=\"line\">    mockgoose(mongoose);</span><br><span class=\"line\">    gulp.src(&#39;.&#x2F;test&#x2F;*.js&#39;)</span><br><span class=\"line\">        .pipe(jasmine())</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在所有的测试中添加mongoose的mock代码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mongoose &#x3D; require(&#39;mongoose&#39;);</span><br><span class=\"line\">var mockgoose &#x3D; require(&#39;mockgoose&#39;);</span><br><span class=\"line\">mockgoose(mongoose);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"mongo\">Mongo<a title=\"#mongo\" href=\"#mongo\"></a></h5>\n<p>添加一个embeded的resource<br>\n使用schema</p>\n<p>Object {} has no method ‘cast’<br>\n很多时候是由于mongoose没有指定对相应的schema<br>\n可以使用如下的方法添加schema</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var User &#x3D; new Schema(&#123;</span><br><span class=\"line\">    name: &#123;type: String, required: true&#125;,</span><br><span class=\"line\">    phone: &#123;type: String, required: true&#125;,</span><br><span class=\"line\">    orders: [mongoose.model(&quot;Order&quot;).schema]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>然后使用如下的方法为user,创建一个order</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var order &#x3D; new Order(&#123;address: req.param(&quot;address&quot;), phone: req.param(&quot;phone&quot;), name: req.param(&quot;name&quot;)&#125;);</span><br><span class=\"line\">user.orders.push(order);</span><br></pre></td></tr></table></figure>\n<p>MissingSchemaError: Schema hasn’t been registered for model “Product”<br>\nproduct: {type: ObjectId, ref: mongoose.model(“Product”).schema}<br>\n这是由于Product还没有被实例化，可以使用require（“./product”）来解决</p>\n<p>TypeError: Invalid value for schema path <code>product.type</code><br>\n这是因为我们定义的时候使用的一下的方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var ObjectId &#x3D; mongoose.ObjectId</span><br><span class=\"line\">product: &#123;type: ObjectId, ref: Product.schema&#125;,</span><br><span class=\"line\">&#x2F;&#x2F; 需要使用的一下的方式</span><br><span class=\"line\">var ObjectId &#x3D; mongoose.Schema.ObjectId</span><br><span class=\"line\">product: &#123;type: ObjectId, ref: Product.schema&#125;,</span><br></pre></td></tr></table></figure>\n<h5 id=\"express-gulp\">Express Gulp<a title=\"#express-gulp\" href=\"#express-gulp\"></a></h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g gulp</span><br><span class=\"line\">npm install --save-dev gulp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; gulpfile.js</span><br><span class=\"line\">var gulp &#x3D; require(&#39;gulp&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(&#39;default&#39;, function() &#123;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面就是一个很简单的没有任何配置的gulp的环境，我们可以在上面加些简单的任务让gulp帮我们跑起来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var jasmine &#x3D; require(&#39;gulp-jasmine&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(&#39;test&#39;, function() &#123;</span><br><span class=\"line\">\tglup.src(&#39;.&#x2F;app&#x2F;test&#x2F;**&#x2F;*.js&#39;)</span><br><span class=\"line\">\t\t.pipe(jasmine())</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","prev":{"title":"ruby 入门","link":"2014/07/08/ruby-peek"},"next":{"title":"Grunt 配置","link":"2014/05/27/grunt intro"},"plink":"https://kopinions.com/2014/07/07/express-intro/","reading_time":"901 字约 6 分钟"}