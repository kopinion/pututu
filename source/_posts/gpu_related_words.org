#+TITLE: GPU 硬件设计过程中的相关术语
#+AUTHOR: 孙建康（rising.lambda）
#+EMAIL:  rising.lambda@gmail.com
#+DATE: 2021-03-20
#+UPDATED: 2021-03-22
#+LAYOUT: post
#+EXCERPT:  GPU 硬件设计中，很多硬件相关的术语，这些术语都代表什么意思呢？
#+DESCRIPTION: GPU 硬件设计中，很多硬件相关的术语，这些术语都代表什么意思呢？
#+TAGS: gpu, ic
#+CATEGORIES: gpu, ic
#+PROPERTY:    header-args        :comments org
#+PROPERTY:    header-args        :mkdirp yes
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil \n:t
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+BIND:        org-preview-latex-image-directory ""
#+OPTIONS:     tex:imagemagick
#+LATEX_HEADER:\usepackage{xeCJK}
#+LATEX_HEADER:\setCJKmainfont{Heiti SC}

**** 像素时钟信号
     在整体 GPU 芯片设计中，需要将最终的内容显示到显示器上。显示器有自己的分辨率，并且需要按照一定的顺序和时钟才能对像素进行正常的读写。
     像素时钟信号是一个非常重要的时钟信号。像素时钟信号的频率与液晶面板的工作模式有关，液晶面板分辨率越高，像素时钟信号的频率也越高。

     只要是数字信号处理电路，就必须有时钟信号。在一行内，像素时钟的个数与液晶面板一行内所具有的像素数量相等。
     例如，对于1024×768的液晶面板，一行有1024个像素，则在一行中（对应于有效视频区间）像素时钟的个数也是1024个。

     像素时钟信号主要有两个作用：

     - 指挥 RGB 信号按照顺序进行传输。数字的 RGB 信号在像素时钟信号的作用下，按照一定的顺序，由驱动板传输到液晶面板中。
     - 确保数据传输的有效性。所有的 RGB 相关的信号，只有在像素时钟的上升沿或者下降沿，才能进行操作。

**** 晶振
     晶振又称晶体振荡器，主要原料是石英晶体。

     在石英晶体上按一定方位切下薄片，将薄片两端抛光并涂上导电的银层，再从银层上连出两个电极并封装起来，这样构成的元件叫石英晶体谐振器，简称石英晶体。

     晶体具有压电效应，即在晶片两极外加电压后，晶体会产生变形；反过来如果在晶片两极施加外力，导致晶体变形，晶体的两极又会产生电压。

     因为晶振的物理特性，晶振在两端有电压的时候，会让晶体产生形变，形变又会触发电压的变化，所以这种情况下会产生震荡，所以可以
     使用晶体的这种特性制作固定频率的信号。
     
     如果给晶片上加上适当的交流电压，晶片就会产生谐振（谐振频率跟晶体的加工工艺，大小等特性有关系，且频率一定）。
     晶振利用一种能把电能和机械能相互转化的晶体，在共振的状态下工作可以提供稳定、精确的单频振荡。在通常的工作条件下，晶振的绝对精度可达
     百万分之五十。

**** 分频
     分频是通过分频电路，将输入信号的频率降低后再进行输出。经过处理后，如果输出的频率是输入频率的 1/2 ,我们称之为 2 分频。
     如果是输入频率的 1/3, 我们称之为 3 分频。如果是 1/n, 我们称之为 n 分频。比如 2 分频的原理旧时让输入脉冲时，输出端才输出
     一个脉冲。假如说输入时钟频率为 1000 Hz, 那么 2 分频后的频率就是 500 Hz.

     分频一般有如下几种做法：

     - D 触发器
     - 循环计数（逢十进一）
       
**** 倍频
     倍频指通过倍频电路，将输入信号的频率提高后再进行输出。实现输出频率为 2、3、4、n 倍的电路分别称之为：2 倍频，3 倍频，
     4 倍频， n 倍频。一般使用锁相环（PLL）的方式来实现倍频。本质上 PLL 就是一个闭环的反馈控制系统。它可以让 PLL 输出，相对于输入在一个固定的相位关系。

**** 上电复位（POR）

     上电复位（POR， Power-On Reset)电路已被广泛地集成到SoC芯片中。
     一个电路系统在上电初期，电源电压还未达到稳定的预期状态，电路节点电压和逻辑状态是不稳定的，可能会造成系统的错误运行。
     为了使系统从一个预定的初始状态开始工作，需要使用上电复位电路在上电初期产生一 个POR信号，使系统初始化。

     上电复位本质上是一个电压检测的过程。当输入电压 Vcc > Vpor 的时候， 上电复位模拟模块将输出 POR 信号给全芯片使用。

     POR 的过程是一个复位到复位释放的过程。

**** 软复位 vs 硬复位
     硬复位，一般指通过硬件给整个系统一个复位信号，比如在电路板上设计一个复位电路，通过按钮就可以给整个系统完成一个复位。而无论软件在执行什么样的操作。
     硬复位一般是全局的，可能会初始化芯片，各个模块，还有一些配置芯片。
     软复位一般指的软件复位，是通过软件给系统一个复位信号。比如往某些模块的配置寄存器写特殊值，来复位某些模块。

**** 时钟树
     
     所谓时钟树，就是从一个基础的参考时钟，能 “长” 出整个系统中各个模块所需要的时钟信号。这个这些不同的时钟信号能能满足各个模块的需要，
     并且多个模块之间也能完成协同工作。具体可以参考 [[https://zhuanlan.zhihu.com/p/77781947][想成为数字IC时钟树综合（clock tree synthesis）专家，建议好好看看这个！]]

**** 内存屏障（Memory Barrier）
     内存屏障（Memory Barrier）也称内内存栅栏（Membar），内存栅障（Memory Fence），屏障指令（Fence Instruction），是一类同步屏障指令。
     它使得 CPU 或者编译器在对内存进行操作的时候，严格的按照一定的顺序来执行。也就是说 memory barrier 前和指令和 memory barrier
     后的指令，不会因为指令优化，指令调度产生乱序的情况。

     之所以需要有内存屏障指令是因为现在的计算机为了提高性能，都采用练习执行的模型，所以需要某种强制的机制来保证整个执行的顺序。

     语义上，所有内存屏障前的所有操作都要写入内存；内存屏障之后的所有读操作都可以获取内存屏障之前写操作的结果。所以对于一些敏感的数据块，会插入
     内存屏障类的指令。比如 C 语言中的 volatile, 就会在编译阶段向指令中插入内存屏障类的指令。
