#+TITLE:  OpenGL 顶点后处理阶段
#+AUTHOR: 孙建康（rising.lambda）
#+EMAIL:  rising.lambda@gmail.com
#+DATE: <2019-11-20 12:40:20>
#+UPDATED: <2019-11-20>
#+LAYOUT: post
#+EXCERPT:  顶点后处理阶段收到了顶点处理阶段处理后的所有的顶点，在这些顶点上需要进行一系列的处理，以便与后续的图元装配和光栅化。顶点处理后，下面的步骤依次执行。
#+DESCRIPTION: 顶点后处理阶段收到了顶点处理阶段处理后的所有的顶点，在这些顶点上需要进行一系列的处理，以便与后续的图元装配和光栅化。顶点处理后，下面的步骤依次执行。
#+TAGS: opengl, graphic
#+CATEGORIES: graphics,opengl
#+PROPERTY:    header-args        :comments org
#+PROPERTY:    header-args        :mkdirp yes
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil \n:t
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+LATEX_HEADER: \usepackage{xeCJK}
#+LATEX_HEADER: \setCJKmainfont{Heiti SC}


** 顶点后处理阶段
顶点后处理阶段收到了顶点处理阶段处理后的所有的顶点，在这些顶点上需要进行一系列的处理，以便与后续的图元装配和光栅化。

顶点处理后，下面的步骤依次执行。

1. [[xfb][变换反馈]]
2. [[cliping][裁剪]]
   1. [[depthclamp][深度夹具]]
   2. [[user_defined_cliping][自定义裁剪]]
3. [[perspective_divide][透视分割]]
4. [[viewport_transform][视口裁剪]]


*** 变换反馈 <<xfb>>
变换反馈将顶点处理阶段的结果收集的缓冲对象中。通过这样的机制，可以获取到顶点处理后的结果，从而可以多次提交和使用这些数据。

*** 裁剪（Cliping） <<cliping>>
裁剪发生在顶点后处理阶段。。裁剪就是这一些列操作中的一个。

在流水线前序阶段生成的所有图元都会被裁剪以适应视景体。每一个输出顶点都会带有一个裁剪空间的坐标（顶点处理阶段设置的 gl_Position）。
裁剪视景体通过如下的公式来定义

-w_{c} <= x_{c} <= w_{c}
-w_{c} <= y_{c} <= w_{c}
-w_{c} <= z_{c} <= w_{c}

在公式中， w_{c} 代表视景体的宽度（一般情况下，视景体是一个正立方体，所以可以用 -w -> w 这种方式来描述）。x, y, z 分别代表
一个顶点在裁剪坐标系中的位置。

这个裁剪体可以通过 depth clamping 和用户自定义裁剪平面进行配置。所有裁剪相关空间组成的空间集合称之为裁剪体。
具体的裁剪算法会随着图元类型变化所变化。

如果图元为点，裁剪算法只需要判断顶点是否在裁剪体内。如果图元是直线， 此时裁剪算法就需要判断线段是否跟裁剪体相交。 如果线段和裁剪体相交，就需要将线段
裁剪为多个线段，裁剪掉不再裁剪体内的线段。如果图元为三角形，如果三角形跟裁剪体相交，裁剪算法需要将三角形拆分为多个三角形，
保留在裁剪体内的三角形，将不再裁剪体内的三角形裁剪掉。

**** 深度夹具 <<depthclamp>>

我们可以通过深度夹具来修改 z 轴上的裁剪行为 (-w_{c} <= z_{c} <= w_{c})。通过 glEnable(GL_DEPTH_CLAMP), 将 z 轴上的裁剪行为关闭。

所以 Z 轴的值会向后传送，在完成 光栅化后，被 glDepthRange 定义的深度夹具进行规整。

**** 自定义裁剪 <<user_defined_cliping>>

额外的裁剪可以通过在顶点处理阶段指定顶点到裁剪平面的距离来完成。在顶点处理阶段，着色器程序可以输出一组变量 gl_ClipDistance[0-7] 来自定义裁剪。

gl_ClipDistance 数组的每一个变量都是一个独立控制的裁剪条件。每一个裁剪控制都需要通过 glEnable 单独开启。形式为 glEnable(GL_CLIP_DISTANCE0).

因为裁剪是固定管线，所以我们只能通过指定顶点距离裁剪平面的距离来自定义裁剪。通过 glEnable(GL_CLIP_DISTANCEi) 开启一个独立的裁剪条件，当裁剪条件开启后，
裁剪器会检查裁剪条件对应的 gl_ClipDistance[i] 中变量的值（distance to clip plane）. 如果该值非负，顶点处于裁剪平面内，如果该值为负，顶点处于裁剪平面之外。

 
*** 透视分割 <<perspective_divide>>

*** 视口裁剪 <<viewport_transform>>
