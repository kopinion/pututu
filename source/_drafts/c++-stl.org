
* stl 是什么
 Standard Template Library
 
** 泛型编程
所谓泛型就是我们在写代码的时候，不适用某种特定的类型，而是使用某种泛化的类型（占位符）。在实际使用这段代码的时候，再使用实际的类型来进行相应的实例化，并调用。通过这种手段，有如下几个显而易见的好处。

- 减少重复代码，增加代码服用程度
- 灵活，能够适应、兼容未来的变化

有一个非常常见的场景，我们需要对两个变量进行求和的操作。刚开始我们的需求可能只需要对 int 类型的变量进行求值操作，于是我们很容易的就会写出如下的代码
#+BEGIN_SRC c++ :eval never :exports code
  int add(int op1, int op2) {
    return op1 + op2;
  }
#+END_SRC

随着时间的发展，我们需要对浮点数

* stl 解决的问题
对于很多的算法，和容器如果我们不

* stl 中的概念
- functor
- 容器
- 算法
- 迭代器
- 适配器
  - 容器适配器
  - 函数适配器
  - 迭代器适配器
- 分配器

* stl 的使用场景
* stl 的常见用法

模板的分类：
1. 函数模板
2. 类模板
模板的原理：
模板元编程：
