#+TITLE: 理解计算机大小端（字节序） 
#+AUTHOR: 孙建康（rising.lambda）
#+EMAIL:  rising.lambda@gmail.com
#+DATE: 2021-03-11
#+UPDATED: 2021-03-11
#+LAYOUT: post
#+EXCERPT:  
#+DESCRIPTION: 
#+TAGS: 
#+CATEGORIES: 
#+PROPERTY:    header-args        :comments org
#+PROPERTY:    header-args        :mkdirp yes
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil \n:t
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+BIND:        org-preview-latex-image-directory ""
#+OPTIONS:     tex:imagemagick
#+LATEX_HEADER:\usepackage{xeCJK}
#+LATEX_HEADER:\setCJKmainfont{Heiti SC}

相信大小端大家都不陌生，常见的定义如下：
小端模式（Little Endian）：数据的低位保存在低地址，数据的高位保存在高地址。
大端模式（Big Endian）： 数据的低位保存在高地址，数据的高位保存在低地址。

*** 为什么会有大小端
    我们知道在计算机中，最根本的数只有 0, 1。所有的其他数都是有 0, 1 的组合来表示。比如我们可以使用 0b1111 来代表 15
    可以用 0b1011 来 代表 11. 但是当我们 0b1101 在两个计算机之间传输的时候，问题就出现了。在计算机与计算机传输的过程中，往往都是以 bit 为单位进行传输的，
    所以任何一个数有两种传输方式

    1. 先传输最高位，依次传输，最后传输最低位
    2. 先传输最低位，依次传输，最后传输最高位
       
    指令 fetch 需要做的事情：
    1. fetch 
